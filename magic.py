# -*- coding: utf-8 -*-
"""Magic.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/pulindu-seniya-silva/magic-dataset-Machine-Learning/blob/main/Magic.ipynb
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from imblearn.over_sampling import RandomOverSampler

cols = ["fLength", "fWidth", "fSize", "fConc", "fConcl", "fAsym", "fM3Long", "FM3Trans", 'fAlpha', "fDist", "class" ]
df = pd.read_csv("magic04.data", names=cols)
df.head()

print(df["class"].unique())
df["class"] = (df["class"] == "g").astype(int)

df.head()

for label in cols[:-1]:
  plt.hist(df[df["class"]==1][label], color='blue', label='gamma', alpha=0.7, density=True)
  plt.hist(df[df["class"]==0][label], color='red', label='hadron', alpha=0.7, density=True)
  plt.title(label)
  plt.ylabel("Probability")
  plt.xlabel(label)
  plt.legend()
  plt.show()

#Train, validation, test datasets
train_frac = 0.6
valid_frac = 0.2
test_frac = 0.2

train = df.sample(frac=train_frac, random_state=42)
valid = df.drop(train.index).sample(frac=valid_frac/(1-train_frac), random_state=42)
test = df.drop(train.index).drop(valid.index)

def scale_dataset(dataframe, oversample=False, return_scaler=False):
  X = dataframe[dataframe.columns[:-1]].values
  y = dataframe[dataframe.columns[-1]].values

  scaler = StandardScaler()
  X = scaler.fit_transform(X)

  if oversample:
    ros = RandomOverSampler()
    X, y = ros.fit_resample(X, y)

  # Return X and y separately
  if return_scaler:
    return X, y, scaler
  return X, y

# Train, validation, test datasets
# Note: The original code had train, valid, test as dataframes.
# After scaling, they are numpy arrays.
# I am keeping the variable names consistent with the rest of the notebook.
X_train, y_train, scaler = scale_dataset(train, oversample=False, return_scaler=True)
X_valid, y_valid = scale_dataset(valid, oversample=False)
X_test, y_test = scale_dataset(test, oversample=False)

"""#KNN"""

from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report

knn_model = KNeighborsClassifier(n_neighbors=5)
knn_model.fit(X_train, y_train)

y_pred = knn_model.predict(X_test)

y_pred

y_test

print(classification_report(y_test, y_pred))

from sklearn.naive_bayes import GaussianNB

nb_model = GaussianNB()
nb_model = nb_model.fit(X_train, y_train)

y_pred = nb_model.predict(X_test)
print(classification_report(y_test, y_pred))

"""Log Regression"""

from sklearn.linear_model import LogisticRegression

lg_model = LogisticRegression()
lg_model = lg_model.fit(X_train, y_train)

y_pred = lg_model.predict(X_test)
print(classification_report(y_test, y_pred))

"""SVM"""

from sklearn.svm import SVC

svm_model = SVC()
svm_model = svm_model.fit(X_train, y_train)

y_pred = svm_model.predict(X_test)
print(classification_report(y_test, y_pred))



"""# Neutral Net

"""

import tensorflow  as tf

def plot_history(history):
  fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 4))
  ax1.plot(history.history['loss'], label='loss')
  ax1.plot(history.history['val_loss'], label='val_loss')
  ax1.set_xlabel('Epoch')
  ax1.set_ylabel('Binary crossentropy')
  ax1.grid(True)

  ax2.plot(history.history['accuracy'], label='accuracy')
  ax2.plot(history.history['val_accuracy'], label='val_accuracy')
  ax2.set_xlabel('Epoch')
  ax2.set_ylabel('Accuracy')
  ax2.grid(True)

  plt.show()

def train_model(X_train, y_train, num_nodes, dropout_prob, lr, batch_size, epochs):
  nn_model = tf.keras.Sequential([
      tf.keras.layers.Dense(num_nodes, activation='relu', input_shape=(X_train.shape[1], )),
      tf.keras.layers.Dropout(dropout_prob),
      tf.keras.layers.Dense(num_nodes, activation='relu'),
      tf.keras.layers.Dropout(dropout_prob),
      tf.keras.layers.Dense(1, activation='sigmoid')

  ])

  nn_model.compile(optimizer=tf.keras.optimizers.Adam(lr), loss='binary_crossentropy',
            metrics=['accuracy'])

  history = nn_model.fit(
    X_train, y_train, epochs=epochs, batch_size=batch_size, validation_data=(X_valid, y_valid), verbose=0
  )

  return nn_model, history

least_val_loss = float('inf')
least_loss_model = None
epochs=10
for num_nodes in [32]:
  for dropout_prob in[0, 0.2]:
    for lr in [0.01, 0.05, 0.001]:
      for batch_size in [32, 64, 128]:
        print(f"{num_nodes} nodes, dropout {dropout_prob}, lr {lr}, batch size {batch_size}")
        model, history = train_model(X_train=X_train, y_train=y_train, num_nodes=num_nodes, dropout_prob=dropout_prob, lr=lr, batch_size=batch_size, epochs=epochs)
        plot_history(history)
        val_loss, val_accuracy = model.evaluate(X_valid, y_valid) # Unpack the metrics
        if val_loss < least_val_loss:
          least_val_loss = val_loss
          least_loss_model = model

y_pred = least_loss_model.predict(X_test)
y_pred = (y_pred > 0.5).astype(int).reshape(-1,)
y_pred

print(classification_report(y_test, y_pred))

import joblib
from sklearn.preprocessing import StandardScaler

least_loss_model.save("model.h5")
joblib.dump(scaler, "scaler.pkl")